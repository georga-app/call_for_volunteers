# Generated by Django 3.2.12 on 2022-03-13 16:06

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'verbose_name': 'Einsatzkategorie',
                'verbose_name_plural': 'Einsatzkategorien',
            },
        ),
        migrations.CreateModel(
            name='EquipmentProvided',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'verbose_name': 'Ausstattung durch HiOrg',
                'verbose_name_plural': 'Ausstattungen durch HiOrg',
            },
        ),
        migrations.CreateModel(
            name='EquipmentSelf',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'verbose_name': 'Ausstattung mitzubringen',
                'verbose_name_plural': 'Ausstattungen mitzubringen',
            },
        ),
        migrations.CreateModel(
            name='HelpOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Hilfstätigkeit',
                'verbose_name_plural': 'Hilfstätigkeit',
            },
        ),
        migrations.CreateModel(
            name='QualificationAdministrative',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Qualifikation Verwaltung',
                'verbose_name_plural': 'Qualifikationen Verwaltung',
            },
        ),
        migrations.CreateModel(
            name='QualificationHealth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Qualifikation Gesundheitswesen',
                'verbose_name_plural': 'Qualifikationen Gesundheitswesen',
            },
        ),
        migrations.CreateModel(
            name='QualificationLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Sprachkenntnis',
                'verbose_name_plural': 'Sprachkenntnisse',
            },
        ),
        migrations.CreateModel(
            name='QualificationLicense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Führerschein',
                'verbose_name_plural': 'Führerscheine',
            },
        ),
        migrations.CreateModel(
            name='QualificationTechnical',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Technische Qualifikation',
                'verbose_name_plural': 'Technische Qualifikationen',
            },
        ),
        migrations.CreateModel(
            name='Restriction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Einschränkung',
                'verbose_name_plural': 'Einschränkungen',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('password_modified', models.DateTimeField(default=django.utils.timezone.now)),
                ('title', models.CharField(choices=[('herr', 'Herr'), ('frau', 'Frau'), ('divers', 'Divers'), ('none', 'Keine')], default='none', max_length=6)),
                ('qualification_specific', models.CharField(blank=True, max_length=60, null=True, verbose_name='Qualif. Details')),
                ('restriction_specific', models.CharField(blank=True, max_length=60, null=True, verbose_name='Einschränkung Details')),
                ('occupation', models.CharField(blank=True, max_length=50, null=True, verbose_name='Beruf')),
                ('help_description', models.TextField(blank=True, max_length=300, null=True)),
                ('street', models.CharField(blank=True, max_length=50, null=True, verbose_name='Straße')),
                ('number', models.CharField(blank=True, max_length=8, null=True, verbose_name='Hausnr.')),
                ('postal_code', models.CharField(blank=True, max_length=5, null=True, verbose_name='PLZ')),
                ('city', models.CharField(blank=True, max_length=50, null=True, verbose_name='Ort')),
                ('private_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=20, null=True, region=None, verbose_name='Festnetznummer')),
                ('mobile_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=20, null=True, region=None, verbose_name='Mobilnummer')),
                ('remark', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Anmerkungen')),
                ('only_job_related_topics', models.CharField(blank=True, choices=[('undefiniert', 'undefiniert'), ('unbedingt', 'unbedingt'), ('nicht nur', 'nicht nur')], max_length=11, null=True, verbose_name='Einsatz nur für eigene Fachtätigkeiten')),
                ('is_active', models.BooleanField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('help_operations', models.ManyToManyField(blank=True, to='georga.HelpOperation')),
                ('qualifications_administrative', models.ManyToManyField(blank=True, to='georga.QualificationAdministrative', verbose_name='Qualifikationen Verwaltung')),
                ('qualifications_health', models.ManyToManyField(blank=True, to='georga.QualificationHealth', verbose_name='Qualifikationen Gesundheitswesen')),
                ('qualifications_language', models.ManyToManyField(blank=True, to='georga.QualificationLanguage', verbose_name='Sprachkenntnisse')),
                ('qualifications_license', models.ManyToManyField(blank=True, to='georga.QualificationLicense', verbose_name='Führerscheine')),
                ('qualifications_technical', models.ManyToManyField(blank=True, to='georga.QualificationTechnical', verbose_name='Qualifikationen Technisch')),
                ('restrictions', models.ManyToManyField(blank=True, to='georga.Restriction', verbose_name='Einschränkung')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Registrierter Helfer',
                'verbose_name_plural': 'Registrierte Helfer',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
