# Generated by Django 4.1.2 on 2022-11-26 16:55

import datetime
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_fsm
import georga.models
import phonenumber_field.modelfields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('password_modified', models.DateTimeField(default=django.utils.timezone.now)),
                ('title', models.CharField(blank=True, choices=[('MR', 'Mr.'), ('MS', 'Ms.'), ('MX', 'Mx.'), ('NONE', 'None')], default='NONE', max_length=4, verbose_name='title')),
                ('person_properties_freetext', models.CharField(blank=True, max_length=60, null=True, verbose_name='properties freetext')),
                ('occupation', models.CharField(blank=True, max_length=50, null=True, verbose_name='occupation')),
                ('task_field_note', models.TextField(blank=True, max_length=300, null=True, verbose_name='task field note')),
                ('street', models.CharField(blank=True, max_length=50, null=True, verbose_name='street')),
                ('number', models.CharField(blank=True, max_length=8, null=True, verbose_name='street number')),
                ('postal_code', models.CharField(blank=True, max_length=5, null=True, verbose_name='postal code')),
                ('city', models.CharField(blank=True, max_length=50, null=True, verbose_name='address - city')),
                ('private_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=20, null=True, region=None, verbose_name='fixed telephone')),
                ('mobile_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=20, null=True, region=None, verbose_name='mobile phone')),
                ('remark', models.CharField(blank=True, max_length=1000, null=True, verbose_name='remarks')),
                ('only_job_related_topics', models.CharField(blank=True, choices=[('UNDEFINED', 'Undefined'), ('ABSOLUTE', 'Absolute'), ('NOTONLY', 'Not only')], max_length=9, null=True, verbose_name='commitment only for job-related topics')),
                ('is_active', models.BooleanField(blank=True, null=True)),
                ('activity_radius_km', models.IntegerField(blank=True, default=0, null=True, verbose_name='agreement to activity radius in km')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'registered helper',
                'verbose_name_plural': 'registered helpers',
            },
            managers=[
                ('objects', georga.models.PersonManager()),
            ],
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(default='', max_length=30)),
                ('owner', models.CharField(choices=[('SELF', 'Person itself'), ('ORG', 'Provided by organization'), ('THIRDPARTY', 'Other party')], default='ORG', max_length=10)),
            ],
            options={
                'verbose_name': 'equipment',
                'verbose_name_plural': 'equipment',
            },
        ),
        migrations.CreateModel(
            name='Operation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('state', django_fsm.FSMField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('ARCHIVED', 'Archived'), ('DELETED', 'Deleted')], default='DRAFT', max_length=9)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('is_active', models.BooleanField(blank=True, default=True, null=True)),
            ],
            options={
                'verbose_name': 'operation',
                'verbose_name_plural': 'operations',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('state', django_fsm.FSMField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('ARCHIVED', 'Archived'), ('DELETED', 'Deleted')], default='DRAFT', max_length=9)),
                ('name', models.CharField(max_length=50)),
                ('icon', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'organization',
                'verbose_name_plural': 'organizations',
            },
        ),
        migrations.CreateModel(
            name='PersonProperty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'person property',
                'verbose_name_plural': 'person properties',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(default='', max_length=50)),
                ('description', models.CharField(max_length=50)),
                ('personal_hint', models.CharField(max_length=50)),
                ('amount', models.IntegerField(default=1, verbose_name='amount of resources desirable with this role')),
                ('equipment_needed', models.ManyToManyField(blank=True, related_name='equipment_needed', to='georga.equipment')),
            ],
            options={
                'verbose_name': 'resource',
                'verbose_name_plural': 'resources',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(default='', max_length=50)),
                ('description', models.CharField(blank=True, max_length=50, null=True)),
                ('quantity', models.PositiveIntegerField()),
                ('is_active', models.BooleanField(default=True)),
                ('is_template', models.BooleanField(default=False)),
                ('needs_admin_acceptance', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'role',
                'verbose_name_plural': 'roles',
            },
        ),
        migrations.CreateModel(
            name='TaskField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='georga.organization')),
            ],
            options={
                'verbose_name': 'task field',
                'verbose_name_plural': 'task fields',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('state', django_fsm.FSMField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('ARCHIVED', 'Archived'), ('DELETED', 'Deleted')], default='DRAFT', max_length=9)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='georga.taskfield')),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='georga.operation')),
                ('resources_desirable', models.ManyToManyField(blank=True, related_name='resources_desirable', to='georga.resource')),
                ('resources_required', models.ManyToManyField(blank=True, related_name='resources_required', to='georga.resource')),
            ],
            options={
                'verbose_name': 'task',
                'verbose_name_plural': 'tasks',
            },
        ),
        migrations.CreateModel(
            name='Shift',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('state', django_fsm.FSMField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('FINISHED', 'Finished'), ('CANCELED', 'Canceled'), ('ARCHIVED', 'Archived'), ('DELETED', 'Deleted')], default='DRAFT', max_length=9)),
                ('enrollment_deadline', models.DateTimeField(default=datetime.datetime.now)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='georga.task')),
            ],
            options={
                'verbose_name': 'shift',
                'verbose_name_plural': 'shifts',
            },
        ),
        migrations.CreateModel(
            name='RoleSpecification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('necessity', models.CharField(choices=[('MANDATORY', 'Mandatory'), ('RECOMMENDED', 'Recommended'), ('UNRECOMMENDED', 'Unrecommended'), ('IMPOSSIBLE', 'Impossible')], max_length=13, verbose_name='necessity')),
                ('person_properties', models.ManyToManyField(blank=True, related_name='person_properties', to='georga.personproperty')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='georga.role')),
            ],
            options={
                'verbose_name': 'role specificatioin',
                'verbose_name_plural': 'role specifications',
            },
        ),
        migrations.AddField(
            model_name='role',
            name='shift',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='georga.shift'),
        ),
        migrations.AddField(
            model_name='role',
            name='task',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='georga.task'),
        ),
        migrations.AddField(
            model_name='resource',
            name='shift',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='georga.shift'),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('state', django_fsm.FSMField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('ARCHIVED', 'Archived'), ('DELETED', 'Deleted')], default='DRAFT', max_length=9)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='georga.organization')),
            ],
            options={
                'verbose_name': 'project',
                'verbose_name_plural': 'projects',
            },
        ),
        migrations.CreateModel(
            name='PersonToObject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('relation_object_id', models.PositiveIntegerField()),
                ('unnoticed', models.BooleanField(default=True)),
                ('bookmarked', models.BooleanField(default=False)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('relation_object_ct', models.ForeignKey(limit_choices_to={'model__in': ['organization', 'project', 'operation', 'task', 'shift', 'role', 'message']}, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='PersonPropertyGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('codename', models.CharField(default='', max_length=30, verbose_name='person propery group')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('selection_type', models.CharField(choices=[('MULTISELECT', 'multiple choice'), ('SINGLESELECT', 'single choice')], default='MULTISELECT', max_length=12, verbose_name='selection type')),
                ('necessity', models.CharField(choices=[('MANDATORY', 'Mandatory'), ('RECOMMENDED', 'Recommended'), ('UNRECOMMENDED', 'Unrecommended'), ('IMPOSSIBLE', 'Impossible')], default='RECOMMENDED', max_length=13, verbose_name='necessity')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='georga.organization')),
            ],
            options={
                'verbose_name': 'group of person properties',
                'verbose_name_plural': 'groups of person properties',
            },
        ),
        migrations.AddField(
            model_name='personproperty',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='georga.personpropertygroup'),
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('acceptance', django_fsm.FSMField(choices=[('ACCEPTED', 'Accepted'), ('DECLINED', 'Declined'), ('PENDING', 'Pending')], default='PENDING', max_length=8)),
                ('admin_acceptance', django_fsm.FSMField(choices=[('ACCEPTED', 'Accepted'), ('DECLINED', 'Declined'), ('PENDING', 'Pending'), ('NONE', 'None')], default='NONE', max_length=8)),
                ('admin_acceptance_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='participants_decided', to=settings.AUTH_USER_MODEL)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='georga.role')),
            ],
            options={
                'verbose_name': 'participant',
                'verbose_name_plural': 'participants',
            },
        ),
        migrations.AddField(
            model_name='operation',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='georga.project'),
        ),
        migrations.CreateModel(
            name='MessageFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('scope_id', models.PositiveIntegerField()),
                ('app', models.CharField(choices=[('INHERITED', 'Inherited'), ('NONE', 'None'), ('URGENT', 'Urgent'), ('IMPORTANT', 'Important'), ('NORMAL', 'Normal'), ('LOW', 'Low')], default='INHERITED', max_length=9)),
                ('email', models.CharField(choices=[('INHERITED', 'Inherited'), ('NONE', 'None'), ('URGENT', 'Urgent'), ('IMPORTANT', 'Important'), ('NORMAL', 'Normal'), ('LOW', 'Low')], default='INHERITED', max_length=9)),
                ('push', models.CharField(choices=[('INHERITED', 'Inherited'), ('NONE', 'None'), ('URGENT', 'Urgent'), ('IMPORTANT', 'Important'), ('NORMAL', 'Normal'), ('LOW', 'Low')], default='INHERITED', max_length=9)),
                ('sms', models.CharField(choices=[('INHERITED', 'Inherited'), ('NONE', 'None'), ('URGENT', 'Urgent'), ('IMPORTANT', 'Important'), ('NORMAL', 'Normal'), ('LOW', 'Low')], default='INHERITED', max_length=9)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('scope_ct', models.ForeignKey(limit_choices_to={'model__in': ['person', 'organization', 'project', 'operation', 'task', 'shift']}, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('scope_id', models.PositiveIntegerField()),
                ('title', models.CharField(max_length=100)),
                ('contents', models.CharField(max_length=1000)),
                ('priority', models.CharField(choices=[('URGENT', 'Urgent'), ('IMPORTANT', 'Important'), ('NORMAL', 'Normal'), ('LOW', 'Low')], default='NORMAL', max_length=9)),
                ('category', models.CharField(choices=[('NEWS', 'News'), ('ALERT', 'Alert'), ('ACTIVITY', 'Activity')], default='NEWS', max_length=8)),
                ('state', django_fsm.FSMField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('ARCHIVED', 'Archived'), ('DELETED', 'Deleted')], default='DRAFT', max_length=9)),
                ('email_delivery', django_fsm.FSMField(choices=[('NONE', 'None'), ('SCHEDULED', 'Scheduled'), ('SENT', 'Sent'), ('SUCCEEDED', 'Succeeded'), ('FAILED', 'Failed')], default='NONE', max_length=9)),
                ('email_delivery_start', models.DateTimeField(blank=True, null=True)),
                ('email_delivery_end', models.DateTimeField(blank=True, null=True)),
                ('email_delivery_error', models.CharField(blank=True, max_length=100, null=True)),
                ('push_delivery', django_fsm.FSMField(choices=[('NONE', 'None'), ('SCHEDULED', 'Scheduled'), ('SENT', 'Sent'), ('SUCCEEDED', 'Succeeded'), ('FAILED', 'Failed')], default='NONE', max_length=9)),
                ('sms_delivery', django_fsm.FSMField(choices=[('NONE', 'None'), ('SCHEDULED', 'Scheduled'), ('SENT', 'Sent'), ('SUCCEEDED', 'Succeeded'), ('FAILED', 'Failed')], default='NONE', max_length=9)),
                ('push_delivery_start', models.DateTimeField(blank=True, null=True)),
                ('push_delivery_end', models.DateTimeField(blank=True, null=True)),
                ('scope_ct', models.ForeignKey(limit_choices_to={'model__in': ['organization', 'project', 'operation', 'task', 'shift']}, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='LocationCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=50)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='georga.organization')),
            ],
            options={
                'verbose_name': 'location category',
                'verbose_name_plural': 'location categories',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('is_template', models.BooleanField(default=False)),
                ('postal_address_name', models.CharField(blank=True, max_length=50, null=True)),
                ('postal_address_street', models.CharField(blank=True, max_length=50, null=True)),
                ('postal_address_zip_code', models.CharField(blank=True, max_length=50, null=True)),
                ('postal_address_city', models.CharField(blank=True, max_length=50, null=True)),
                ('postal_address_country', models.CharField(blank=True, max_length=50, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='georga.locationcategory')),
                ('shift', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='georga.shift')),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='georga.task')),
            ],
            options={
                'verbose_name': 'location',
                'verbose_name_plural': 'locations',
            },
        ),
        migrations.AddField(
            model_name='equipment',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='georga.organization'),
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=50)),
                ('os_type', models.CharField(choices=[('ANDROID', 'Android'), ('IOS', 'iOS'), ('LINUX', 'Linux'), ('OTHER', 'Other')], max_length=7)),
                ('os_version', models.CharField(max_length=35)),
                ('app_type', models.CharField(choices=[('MAUI', 'Maui'), ('REACT', 'React')], max_length=5)),
                ('app_version', models.CharField(max_length=15)),
                ('app_store', models.CharField(choices=[('GOOGLEPLAY', 'Google Play'), ('FDROID', 'F-Droid'), ('AMAZON', 'Amazon')], max_length=10)),
                ('push_token_type', models.CharField(choices=[('FCM', 'FCM'), ('NTFY', 'NTFY'), ('APN', 'APN'), ('ONESIGNAL', 'OneSignal')], max_length=9)),
                ('push_token', models.CharField(max_length=200)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'client device',
                'verbose_name_plural': 'client devices',
            },
        ),
        migrations.CreateModel(
            name='ACE',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('instance_id', models.PositiveIntegerField()),
                ('permission', models.CharField(choices=[('ADMIN', 'Admin')], max_length=5)),
                ('instance_ct', models.ForeignKey(limit_choices_to={'model__in': ['organization', 'project', 'operation']}, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='person',
            name='organizations_employed',
            field=models.ManyToManyField(blank=True, related_name='persons_employed', to='georga.organization', verbose_name='organizations employed at'),
        ),
        migrations.AddField(
            model_name='person',
            name='organizations_subscribed',
            field=models.ManyToManyField(blank=True, related_name='persons_subscribed', to='georga.organization', verbose_name='organizations subscribed to'),
        ),
        migrations.AddField(
            model_name='person',
            name='properties',
            field=models.ManyToManyField(blank=True, to='georga.personproperty', verbose_name='properties'),
        ),
        migrations.AddField(
            model_name='person',
            name='resources_provided',
            field=models.ManyToManyField(blank=True, to='georga.resource', verbose_name='resources provided'),
        ),
        migrations.AddField(
            model_name='person',
            name='roles_agreed',
            field=models.ManyToManyField(blank=True, to='georga.role', verbose_name='agreement to roles'),
        ),
        migrations.AddField(
            model_name='person',
            name='task_fields_agreed',
            field=models.ManyToManyField(blank=True, to='georga.taskfield', verbose_name='agreement to task fields'),
        ),
        migrations.AddField(
            model_name='person',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='persontoobject',
            index=models.Index(fields=['relation_object_ct', 'relation_object_id'], name='georga_pers_relatio_9fa2e9_idx'),
        ),
        migrations.AddIndex(
            model_name='messagefilter',
            index=models.Index(fields=['scope_ct', 'scope_id'], name='georga_mess_scope_c_0be525_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='messagefilter',
            unique_together={('scope_ct', 'scope_id', 'person')},
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['scope_ct', 'scope_id'], name='georga_mess_scope_c_eb262d_idx'),
        ),
        migrations.AddIndex(
            model_name='ace',
            index=models.Index(fields=['instance_ct', 'instance_id'], name='georga_ace_instanc_eba447_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='ace',
            unique_together={('instance_ct', 'instance_id', 'person', 'permission')},
        ),
    ]
