# Generated by Django 3.2.13 on 2022-07-23 10:22

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('password_modified', models.DateTimeField(default=django.utils.timezone.now)),
                ('title', models.CharField(choices=[('MR', 'Mr.'), ('MS', 'Ms.'), ('MX', 'Mx.'), ('NONE', 'None')], default='NONE', max_length=4, verbose_name='title')),
                ('qualification_specific', models.CharField(blank=True, max_length=60, null=True, verbose_name='qualification details')),
                ('restriction_specific', models.CharField(blank=True, max_length=60, null=True, verbose_name='restriction details')),
                ('occupation', models.CharField(blank=True, max_length=50, null=True, verbose_name='occupation')),
                ('task_category_description', models.TextField(blank=True, max_length=300, null=True, verbose_name='task category details')),
                ('street', models.CharField(blank=True, max_length=50, null=True, verbose_name='street')),
                ('number', models.CharField(blank=True, max_length=8, null=True, verbose_name='street number')),
                ('postal_code', models.CharField(blank=True, max_length=5, null=True, verbose_name='postal code')),
                ('city', models.CharField(blank=True, max_length=50, null=True, verbose_name='address - city')),
                ('private_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=20, null=True, region=None, verbose_name='fixed telephone')),
                ('mobile_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=20, null=True, region=None, verbose_name='mobile phone')),
                ('remark', models.CharField(blank=True, max_length=1000, null=True, verbose_name='remarks')),
                ('only_job_related_topics', models.CharField(blank=True, choices=[('UNDEFINED', 'undefined'), ('ABSOLUTE', 'absolute'), ('NOTONLY', 'not only')], max_length=9, null=True, verbose_name='commitment only for job-related topics')),
                ('is_active', models.BooleanField(blank=True, null=True)),
                ('activity_radius_km', models.IntegerField(blank=True, default=0, null=True, verbose_name='agreement to activity radius in km')),
            ],
            options={
                'verbose_name': 'registered helper',
                'verbose_name_plural': 'registered helpers',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('device_string', models.CharField(max_length=50)),
                ('os_version', models.CharField(max_length=35)),
                ('app_version', models.CharField(max_length=15)),
                ('push_token', models.UUIDField(default=uuid.uuid4, editable=False)),
            ],
            options={
                'verbose_name': 'client device',
                'verbose_name_plural': 'client devices',
            },
        ),
        migrations.CreateModel(
            name='EquipmentProvided',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'verbose_name': 'equipment provided by organization',
                'verbose_name_plural': 'equipments provided by organization',
            },
        ),
        migrations.CreateModel(
            name='EquipmentSelf',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'verbose_name': 'own equipment',
                'verbose_name_plural': 'own equipments',
            },
        ),
        migrations.CreateModel(
            name='LocationCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'location category',
                'verbose_name_plural': 'location categories',
            },
        ),
        migrations.CreateModel(
            name='NotificationCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'notification category',
                'verbose_name_plural': 'notification categories',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'organization',
                'verbose_name_plural': 'organizations',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=50)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='georga.organization')),
            ],
            options={
                'verbose_name': 'project',
                'verbose_name_plural': 'projects',
            },
        ),
        migrations.CreateModel(
            name='QualificationCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'qualification category',
                'verbose_name_plural': 'qualification categories',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('description', models.CharField(max_length=50)),
                ('personal_hint', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'resource',
                'verbose_name_plural': 'resources',
            },
        ),
        migrations.CreateModel(
            name='Restriction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'restriction',
                'verbose_name_plural': 'restrictions',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'role',
                'verbose_name_plural': 'roles',
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
            ],
            options={
                'verbose_name': 'schedule',
                'verbose_name_plural': 'schedules',
            },
        ),
        migrations.CreateModel(
            name='TaskCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'task category',
                'verbose_name_plural': 'task categories',
            },
        ),
        migrations.CreateModel(
            name='Timeslot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='georga.schedule')),
            ],
            options={
                'verbose_name': 'timeslot',
                'verbose_name_plural': 'timeslots',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('title', models.CharField(max_length=50)),
                ('postal_address_name', models.CharField(blank=True, max_length=50, null=True)),
                ('postal_address_street', models.CharField(blank=True, max_length=50, null=True)),
                ('postal_address_zip_code', models.CharField(blank=True, max_length=50, null=True)),
                ('postal_address_city', models.CharField(blank=True, max_length=50, null=True)),
                ('postal_address_country', models.CharField(blank=True, max_length=50, null=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('persons_participated', models.ManyToManyField(blank=True, related_name='persons_participated', to=settings.AUTH_USER_MODEL)),
                ('persons_registered', models.ManyToManyField(blank=True, related_name='persons_registered', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='georga.project')),
                ('resources_desirable', models.ManyToManyField(blank=True, related_name='resources_desirable', to='georga.Resource')),
                ('resources_required', models.ManyToManyField(blank=True, related_name='resources_required', to='georga.Resource')),
                ('roles_desirable', models.ManyToManyField(blank=True, related_name='roles_desirable', to='georga.Role')),
                ('roles_required', models.ManyToManyField(blank=True, related_name='roles_required', to='georga.Role')),
                ('task_category', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='georga.taskcategory')),
            ],
            options={
                'verbose_name': 'task',
                'verbose_name_plural': 'tasks',
            },
        ),
        migrations.AddField(
            model_name='schedule',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='georga.task'),
        ),
        migrations.CreateModel(
            name='Qualification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('qualification_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='georga.qualificationcategory')),
            ],
            options={
                'verbose_name': 'qualification',
                'verbose_name_plural': 'qualification',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('title', models.CharField(max_length=50)),
                ('contents', models.CharField(max_length=1000)),
                ('priority', models.CharField(choices=[('DISTURB', 'disturb'), ('ONAPPCALL', 'on app call'), ('ONNEWS', 'on reading news actively')], default='ONNEWS', max_length=9)),
                ('notification_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='georga.notificationcategory')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('address', models.CharField(max_length=200)),
                ('location_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='georga.locationcategory')),
            ],
            options={
                'verbose_name': 'location',
                'verbose_name_plural': 'locations',
            },
        ),
        migrations.CreateModel(
            name='Deployment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=50)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='georga.organization')),
            ],
            options={
                'verbose_name': 'deployment',
                'verbose_name_plural': 'deployments',
            },
        ),
        migrations.AddField(
            model_name='person',
            name='devices',
            field=models.ManyToManyField(blank=True, to='georga.Device', verbose_name='devices'),
        ),
        migrations.AddField(
            model_name='person',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='person',
            name='organizations_subscribed',
            field=models.ManyToManyField(to='georga.Organization', verbose_name='organizations subscribed to'),
        ),
        migrations.AddField(
            model_name='person',
            name='qualifications',
            field=models.ManyToManyField(blank=True, to='georga.Qualification', verbose_name='qualification'),
        ),
        migrations.AddField(
            model_name='person',
            name='resources_provided',
            field=models.ManyToManyField(blank=True, to='georga.Resource', verbose_name='resources provided'),
        ),
        migrations.AddField(
            model_name='person',
            name='restrictions',
            field=models.ManyToManyField(blank=True, to='georga.Restriction', verbose_name='restrictions'),
        ),
        migrations.AddField(
            model_name='person',
            name='roles_agreed',
            field=models.ManyToManyField(blank=True, to='georga.Role', verbose_name='agreement to roles'),
        ),
        migrations.AddField(
            model_name='person',
            name='task_categories_agreed',
            field=models.ManyToManyField(blank=True, to='georga.TaskCategory', verbose_name='agreement to task categories'),
        ),
        migrations.AddField(
            model_name='person',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
